//************************************************************************************************
// Copyright © 2011. All Rights Reserved.
//
//************************************************************************************************

namespace cloc
{
	using System;
	using System.IO;
	using System.Text.RegularExpressions;


	class Program
	{
		private class Counters
		{
			public int Total;           // raw lines including braces, comments, and directives
			public int AutoGenerated;   // lines within "generated code" regions
			public int Braces;          // lines containing only open and close curly braces
			public int Code;            // product code, no comments, directives, braces
			public int Comments;        // comment lines, both double and triple slash
			public int Directives;      // lines beginning with "#" directives
			public int BAT;             // batch scripts
			public int CONFIG;          // config files
			public int JSON;            // JSON files
			public int PS1;             // PowerShell scripts
			public int SQL;             // SQL scripts
			public int XML;             // XML files

			public Counters()
			{
				Total = Code = Comments = Braces = Directives = AutoGenerated = 0;
				BAT = CONFIG = JSON = PS1 = SQL = XML = 0;
			}

			public void Add(Counters other)
			{
				Total += other.Total;
				AutoGenerated += other.AutoGenerated;
				Braces += other.Braces;
				Code += other.Code;
				Comments += other.Comments;
				Directives += other.Directives;
				BAT += other.BAT;
				CONFIG += other.CONFIG;
				JSON += other.JSON;
				PS1 += other.PS1;
				SQL += other.SQL;
				XML += other.XML;
			}
		}

		private const string ReportFormat =
			"{0,40} {1,10} {2,10} {3,10} {4,10} {5,10} {6,10} {7,10} {8,10} {9,10}";

		private const string ReportFormatAF =
			"{0,40} {1,10} {2,10} {3,10} {4,10} {5,10} {6,10} {7,10} {8,10} {9,10} {10,10}";

		private const string RawFormat = "{0,35} {1,10}";

		private static string rootPath;
		private static bool includeAutoGen;


		//========================================================================================
		// Main()
		//========================================================================================

		static void Main(string[] args)
		{
			ParseArguments(args);
			if (!string.IsNullOrEmpty(rootPath))
			{
				rootPath = Path.GetFullPath(rootPath);
			}

			if (!Directory.Exists(rootPath))
			{
				rootPath = Environment.CurrentDirectory;
			}

			ReportHeader();

			var t0 = DateTime.Now;
			var codeTotals = new Counters();
			var testTotals = new Counters();

			Analyze(rootPath, codeTotals, testTotals);

			var span = DateTime.Now.Subtract(t0);

			DrawLines();

			Report(codeTotals, "Production Code");
			Report(testTotals, "Test Code");

			testTotals.Add(codeTotals);
			Report(testTotals, "Totals");

			Console.WriteLine();
			Console.WriteLine("... " + span.ToString());
		}


		static void ParseArguments(string[] args)
		{
			rootPath = null;
			includeAutoGen = false;

			foreach (string arg in args)
			{
				if (arg.ToLower().Equals("-auto"))
				{
					includeAutoGen = true;
				}
				else if (rootPath == null)
				{
					rootPath = arg;
				}
			}
		}


		//========================================================================================
		// Analyze()
		//========================================================================================

		static void Color (string text, ConsoleColor color)
		{
			var save = Console.ForegroundColor;
			Console.ForegroundColor = color;
			Console.WriteLine(text);
			Console.ForegroundColor = save;
		}


		static void Analyze(string path, Counters codeTotals, Counters testTotals)
		{
			foreach (string dpath in Directory.EnumerateDirectories(
				path, "*", SearchOption.TopDirectoryOnly))
			{
				var codeCounters = new Counters();
				var testCounters = new Counters();

				foreach (string ppath in Directory.EnumerateDirectories(
					Path.Combine(path, dpath), "*.*", SearchOption.TopDirectoryOnly))
				{
					//string name = Path.GetFileName(ppath).ToLower();
					//if (!(name.StartsWith("db_") || name.StartsWith("waters.")))
					//{
					//	continue;
					//}

					if (dpath.EndsWith(".AcceptanceTests") ||
						dpath.EndsWith(".Tests"))
					{
						AnalyzeProject(ppath, testCounters);
					}
					else
					{
						AnalyzeProject(ppath, codeCounters);
					}
				}

				testTotals.Add(testCounters);
				codeTotals.Add(codeCounters);

				Report(codeCounters, Path.GetFileName(dpath));
			}
		}


		static void AnalyzeProject(string path, Counters counters)
		{
			// lines containing only curly braces
			Regex pattern = new Regex(@"(?:^\{+$)|(?:^\}+$)");

			foreach (string fpath in Directory.EnumerateFiles(
				path, "*.*", SearchOption.AllDirectories))
			{
				// skip VS auto-generated Designer files
				if ((!includeAutoGen) && Path.GetFileNameWithoutExtension(fpath).EndsWith(".Designer"))
				{
					continue;
				}

				string extension = Path.GetExtension(fpath).ToLower();
				if (!extension.Equals(".cs"))
				{
					if (extension.Equals(".bat"))
					{
						counters.BAT += CountRaw(fpath);
					}
					else if (extension.Equals(".config"))
					{
						counters.CONFIG += CountRaw(fpath);
					}
					else if (extension.Equals(".json"))
					{
						counters.JSON += CountRaw(fpath);
					}
					else if (extension.Equals(".ps1"))
					{
						counters.PS1 += CountRaw(fpath);
					}
					else if (extension.Equals(".sql"))
					{
						counters.SQL += CountRaw(fpath);
					}
					else if (extension.Equals(".xml"))
					{
						counters.XML += CountRaw(fpath);
					}

					continue;
				}

				bool autoGenerated = false;

				using (var reader = File.OpenText(fpath))
				{
					while (!reader.EndOfStream)
					{
						string line = reader.ReadLine().TrimStart();
						if (line.Length > 0)
						{
							if (autoGenerated)
							{
								// skip auto-generated lines until we find an #endregion
								// assuming there is only one matching endregion
								if (line.StartsWith("#endregion"))
								{
									counters.Directives++;
									autoGenerated = false;
								}
								else
								{
									counters.AutoGenerated++;
								}
							}
							else if (line.StartsWith("//"))
							{
								counters.Comments++;
							}
							else if (line.StartsWith("#"))
							{
								counters.Directives++;

								if (line.StartsWith("#region Component Designer generated code") ||
									line.StartsWith("#region Windows Form Designer generated code"))
								{
									autoGenerated = true;
								}
							}
							else
							{
								line = line.Replace(" ", String.Empty);
								Match match = pattern.Match(line);
								if (match.Success)
								{
									counters.Braces++;
								}
								else
								{
									counters.Code++;
								}
							}

							counters.Total++;
						}
					}
				}
			}
		}


		static int CountRaw(string path)
		{
			int count = 0;
			using var reader = File.OpenText(path);

			while (!reader.EndOfStream)
			{
				string line = reader.ReadLine().Trim();
				if (line.Length > 0)
				{
					count++;
				}
			}

			return count;
		}


		static void ReportHeader()
		{
			if (includeAutoGen)
			{
				Console.WriteLine(ReportFormatAF, String.Empty,
					"Total", "Code", "Comments", "Directives", "AutoGen", "Braces", "Executable",
					"json", "ps1", "xml");
			}
			else
			{
				Console.WriteLine(ReportFormat, String.Empty,
					"Total", "Code", "Comments", "Directives", "Braces", "Executable",
					"json", "ps1", "xml");
			}

			DrawLines();
		}


		static void DrawLines()
		{
			string line = String.Empty.PadRight(10, '-');
			Console.WriteLine(ReportFormat, String.Empty,
				line, line, line, line, line, line, line, line, line, line);
		}


		static void Report(Counters counters, string title)
		{
			if (includeAutoGen)
			{
				Console.WriteLine(ReportFormatAF, title,
					counters.Total,
					counters.Code + counters.Braces,
					counters.Comments,
					counters.Directives,
					counters.AutoGenerated,
					counters.Braces,
					counters.Code,
					counters.JSON,
					counters.PS1,
					counters.XML);
			}
			else
			{
				Console.WriteLine(ReportFormat, title,
					counters.Total,
					counters.Code + counters.Braces,
					counters.Comments,
					counters.Directives,
					counters.Braces,
					counters.Code,
					counters.JSON,
					counters.PS1,
					counters.XML);
			}
		}
	}
}
